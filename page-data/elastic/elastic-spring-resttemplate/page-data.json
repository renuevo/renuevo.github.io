{"componentChunkName":"component---src-templates-blog-post-js","path":"/elastic/elastic-spring-resttemplate/","webpackCompilationHash":"dd6446ba0ee474ebefbc","result":{"data":{"site":{"siteMetadata":{"title":"renuevo blog","author":"deokhwa kim","siteUrl":"https://renuevo.github.io","comment":{"disqusShortName":"https-renuevo-github-io","utterances":""},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"bcc8d9a6-5f8d-5065-b33b-58194c5ff199","excerpt":"ElasticSearch에서 spring에 있는 RestTemplate를 사용하기 위해서는 RestTemplate의 Post전달 처음엔 을 로 선언했었는데 이상 없이 보였지만 한글이 들어간 쿼리는 그냥 아무 값이나 전부 가져오는 현상을 보였다   Configuration로 정의 지금은 RestTemplate말고 elastic-rest-client를 사용하고 있다 (2019-09-04 작성)\nRestTemplate 말고 WebClient에 대해 공부하세요! (2019-09-05 작성)","html":"<p><strong><em>ElasticSearch에서 spring에 있는 RestTemplate를 사용하기 위해서는 RestTemplate의 Post전달</em></strong></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> exRest<span class=\"token punctuation\">{</span>\n \n    <span class=\"token class-name\">RestTemplate</span> restTemplate<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">HttpHeaders</span> headers<span class=\"token punctuation\">;</span>\n \n    <span class=\"token keyword\">public</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n          restTemplate <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RestTemplate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          restTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">getMessageConverters</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">MappingJackson2HttpMessageConverter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token class-name\">Charset</span> utf8 <span class=\"token operator\">=</span> <span class=\"token class-name\">Charset</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token class-name\">MediaType</span> mediaType <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MediaType</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"application\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"json\"</span><span class=\"token punctuation\">,</span> utf8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//mediaType을 UTF8로 해줘야만 Post로 전달되는 한글이 인식됨</span>\n          headers <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HttpHeaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n          <span class=\"token class-name\">HttpEntity</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> httpEntity<span class=\"token punctuation\">;</span>\n          <span class=\"token class-name\">ResponseEntity</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> responseEntity<span class=\"token punctuation\">;</span>\n \n          httpEntity <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HttpEntity</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>esQuery<span class=\"token punctuation\">,</span> headers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>           <span class=\"token comment\">//esQuery는 Post로 전달할 json 쿼리</span>\n          responseEntity <span class=\"token operator\">=</span> restTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">exchange</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpMethod</span><span class=\"token punctuation\">.</span>POST<span class=\"token punctuation\">,</span> httpEntity<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">//String형식으로 리턴</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br/>\n<p>처음엔 <code class=\"language-text\">mediaType</code>을</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">headers<span class=\"token punctuation\">.</span><span class=\"token function\">setContentType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MediaType</span><span class=\"token punctuation\">.</span>APPLICATION_JSON<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>로 선언했었는데 이상 없이 보였지만 한글이 들어간 쿼리는 그냥 아무 값이나 전부 가져오는 현상을 보였다  </p>\n<hr>\n<h3 id=\"configuration로-정의\"><a href=\"#configuration%EB%A1%9C-%EC%A0%95%EC%9D%98\" aria-label=\"configuration로 정의 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Configuration로 정의</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@EnableRetry</span>\n<span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RestfulConfig</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token class-name\">RestTemplate</span> <span class=\"token function\">restTemplate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">RestTemplate</span> restTemplate <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RestTemplate</span><span class=\"token punctuation\">(</span><span class=\"token function\">clientHttpRequestFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        restTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">getMessageConverters</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">MappingJackson2HttpMessageConverter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> restTemplate<span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token class-name\">HttpComponentsClientHttpRequestFactory</span> <span class=\"token function\">clientHttpRequestFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">HttpComponentsClientHttpRequestFactory</span> factory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HttpComponentsClientHttpRequestFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        factory<span class=\"token punctuation\">.</span><span class=\"token function\">setConnectTimeout</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token operator\">*</span><span class=\"token number\">60</span><span class=\"token operator\">*</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//15분</span>\n        factory<span class=\"token punctuation\">.</span><span class=\"token function\">setReadTimeout</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token operator\">*</span><span class=\"token number\">60</span><span class=\"token operator\">*</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">//15분</span>\n        <span class=\"token keyword\">return</span> factory<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token class-name\">HttpHeaders</span> <span class=\"token function\">httpHeaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n        <span class=\"token class-name\">Charset</span> utf8 <span class=\"token operator\">=</span> <span class=\"token class-name\">Charset</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">MediaType</span> mediaType <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MediaType</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"application\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"json\"</span><span class=\"token punctuation\">,</span> utf8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//mediaType을 UTF8로 해줘야만 한글이 인식됨</span>\n        <span class=\"token class-name\">HttpHeaders</span> headers <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HttpHeaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        headers<span class=\"token punctuation\">.</span><span class=\"token function\">setContentType</span><span class=\"token punctuation\">(</span>mediaType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> headers<span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong><em>지금은 RestTemplate말고 elastic-rest-client를 사용하고 있다 (2019-09-04 작성)</em></strong>\n<strong><em>RestTemplate 말고 WebClient에 대해 공부하세요! (2019-09-05 작성)</em></strong></p>","frontmatter":{"title":"[Elastic] RestTemplate Elastic 통신","date":"October 04, 2018"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/elastic/elastic-spring-resttemplate/","previous":{"fields":{"slug":"/elastic/elastic-timezone/"},"frontmatter":{"title":"[Elastic] ElasticSearch Timezone 문제","category":"Elastic"}},"next":{"fields":{"slug":"/data-science/learning-to-rank/"},"frontmatter":{"title":"[DataScience] LTR(Learning To Rank)","category":"Data Science"}}}}}