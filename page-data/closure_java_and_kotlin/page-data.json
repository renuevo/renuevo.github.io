{"componentChunkName":"component---src-templates-blog-post-index-js","path":"/closure_java_and_kotlin/","webpackCompilationHash":"9580e596b53f8ef7a4a3","result":{"data":{"site":{"siteMetadata":{"title":"DRcode","author":"Deokhwa Kim"}},"markdownRemark":{"id":"d0917ad0-5372-512f-af70-b67bdb76b978","html":"<h1>java와 kotlin의 closure에 관하여</h1>\n<p>이전에 <a href=\"https://renuevo.github.io/why_kotlin/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">왜 Kotlin을 써야 할까?</a>에서 제가 언급했던 closure에 관한 포스팅을 하려고 합니다  </p>\n<h2>Closure</h2>\n<p>먼저 closure부터 살펴 보겠습니다<br>\n<span class='red_font'><strong>Closure</strong></span>는 <code class=\"language-text\">close over</code>라는 의미로 일반적으로 언어마다 조금씩의 차이가 있을수 있겠지만 일반적으로\n내부 scope를 뛰어 넘어서 하위 함수가 상위 함수의 접근할 수 있는 것을 말합니다<br>\n말로 하면 어려우니 java와 kotlin의 closure를 code로 보면서 이해하는게 쉬울꺼 같습니다   </p>\n<hr>\n<h2>Kotlin Closure</h2>\n<p>kotlin에서는 closure를 자유롭게 사용할 수 있습니다(javascript등의 언어들도 여기에 속합니다)  </p>\n<p><span class='code_header'><strong>Kotlin Closure Code 1</strong></span>  </p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\">    <span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>args<span class=\"token operator\">:</span> Array<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"kim deokhwa\"</span>\n            <span class=\"token keyword\">fun</span> <span class=\"token function\">closureTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">                <span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>   <span class=\"token comment\">//close over 접근  </span></span>            <span class=\"token punctuation\">}</span>\n<span class=\"gatsby-highlight-code-line\">        <span class=\"token function\">closureTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">//kim deokhwa 출력  </span></span>    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>일단 내부함수에서 외부 변수에 접근해서 값을 출력하는 예시입니다<br>\n내부의 closureTest에서 외부변수인 name을 접근해서 println으로 출력했습니다</p>\n<br/>\n<p><span class='code_header'><strong>Kotlin Closure Code 2</strong></span>  </p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\">    <span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>args<span class=\"token operator\">:</span> Array<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"kim deokhwa\"</span>\n            <span class=\"token keyword\">fun</span> <span class=\"token function\">closureTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">                name <span class=\"token operator\">=</span> <span class=\"token string\">\"renuevo\"</span>   <span class=\"token comment\">//close over 접근 변경  </span></span>            <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">closureTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\">        <span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>   <span class=\"token comment\">//renuevo 출력  </span></span>    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>이처럼 접근 또한 아니라 변경도 가능합니다<br>\n하지만 java에서는 이러한 closure의 기능이 제한되며 오로지 <code class=\"language-text\">final</code>값을 참조하는 것만 가능합니다<br>\n이러한 Closure는 익명함수와 내부함수들 또는 익명클래스들 보다 <code class=\"language-text\">lambda</code>를 사용할때 더욱 유용합니다  </p>\n<br/>\n<p><span class='code_header'><strong>Kotlin Closure Code 3 <span class='sub_header'>(lambda &#x26; closure)</span></strong></span>  </p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\">    <span class=\"token keyword\">public</span> static void <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token keyword\">val</span> personList <span class=\"token operator\">=</span> <span class=\"token function\">listOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"deokhwa Kim\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"junghoon Im\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"jikin Kim\"</span><span class=\"token punctuation\">)</span>\n    \n        <span class=\"token keyword\">var</span> allName<span class=\"token operator\">:</span> String<span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n<span class=\"gatsby-highlight-code-line\">        personList<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">            allName <span class=\"token operator\">=</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>allName<span class=\"token punctuation\">.</span><span class=\"token function\">isNullOrEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> it   <span class=\"token comment\">//외부 참조</span></span><span class=\"gatsby-highlight-code-line\">                      <span class=\"token keyword\">else</span> <span class=\"token string\">\"<span class=\"token interpolation variable\">$allName</span>, <span class=\"token interpolation variable\">$it</span>\"</span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token punctuation\">}</span></span>        <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"person name : <span class=\"token interpolation variable\">$allName</span>\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//person name : deokhwa Kim, junghoon Im, jikin Kim</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>위의 예제는 allName에 모든 이름을 모아서 출력하는 예제입니다<br>\n보스는것과 같이 allName에 personList의 labmda식 내부에서 얼마든지 값 변경이 가능합니다  </p>\n<hr>\n<h2>Java Closure</h2>\n<p>다음으로 java의 closure를 살펴 보도록 하겠습니다<br>\njava의 closure는 다른 언어들의 closure은 다르게 오로지 참조만이 가능합니다<br>\n이 때문에 java의 closure를 closure로 인정할지 말지 아직도 이견이 많다고 합니다  </p>\n<p><span class='code_header'><strong>Java Closure Code 1 <span class='sub_header'>(Anonymous Class)</span></strong></span>  </p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RenuevoApplication</span> <span class=\"token punctuation\">{</span>\n    \n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    \n<span class=\"gatsby-highlight-code-line\">            <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"kim deokhwa\"</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//유사 final  </span></span>    \n            <span class=\"token class-name\">Thread</span> thread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//kim deokhwa 출력  </span></span>                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n            thread<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>이처럼 익명클래스의 함수가 외부의 변수값을 참조하는데는 문제가 없습니다<br>\n위의 name은 <code class=\"language-text\">final</code>을 쓰지는 않았지만 <code class=\"language-text\">run()</code>에서 사용하므로 컴파일러에서는 <code class=\"language-text\">name</code>을 <code class=\"language-text\">final</code>로 인식하여 이후에도 변경하지 못하게 합니다  </p>\n<br/>\n<p><span class='code_header'><strong>Java Closure Code 2 <span class='sub_header'>(Anonymous Class Final change Error)</span></strong></span>  </p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RenuevoApplication</span> <span class=\"token punctuation\">{</span>\n    \n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    \n            <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"kim deokhwa\"</span><span class=\"token punctuation\">;</span>\n    \n            <span class=\"token class-name\">Thread</span> thread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">                    name <span class=\"token operator\">=</span> <span class=\"token string\">\"renuevo\"</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//local variables referenced from an inner class must be final or effectively final  </span></span>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   \n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n            thread<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>이처럼 java에서는 closure로 참조만 가능 할뿐 값을 변경하려고 하면 Error을 보게 됩니다  </p>\n<hr>\n<h2>같은 JVM위에서 돌아가는데 왜 Java는 안되고 Kotlin은 가능한 것일까?</h2>\n<p>일단 기본적으로 Inner에서 Outer 변수에 접근하는것은 <code class=\"language-text\">Scope</code>적인 측면에서 <code class=\"language-text\">Memory Leak</code> 현상이 발생할 수 있습니다<br>\n또한 누군 heap memory고 내부는 stack에서 관리하니 memory 구조도 다르게 되는 것이죠  </p>\n<p><code class=\"language-text\">java</code>에서는 익명클래스에서 외부 변수를 참조할때 외부 변수값을 생성자로 받아와서 <code class=\"language-text\">capture형식</code>으로 사용하게 됩니다<br>\n그래서 memory leak현상이 생길 수도 있으며, 데이터의 변경이 불가능 하게 되는 것입니다   </p>\n<p><code class=\"language-text\">kotlin</code>에서 사용하는 lambda에서는 <code class=\"language-text\">static</code>으로 외부 변수값에 접근하도록 구현되어 있습니다<br>\n때문에 memory leak현상도 예방하면 외부변수에 자유롭게 접근할 수 있는 것입니다  </p>\n<p><strong>그렇다면 java의 lambda에서는 어째서 static으로 closure를 사용할 수 있도록 만들지 않았을까요?</strong><br>\n\"Effective Java\"의 저자이며 Java 언어에 많은 영향을 미치는 인물인 <a href=\"https://en.wikipedia.org/wiki/Joshua_Bloch\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Joshua Bloch</a>는 2010년에 다음과 같은 의견을 밝혔습니다  </p>\n<div class=\"gatsby-highlight\" data-language=\"textbox\"><pre class=\"language-textbox\"><code class=\"language-textbox\">이미 익명 클래스로 할 수 있는 일을 더 쉽게 하고, 불필요하게 장황해지지 않게 하는 것이 가장 중요하다고 생각합니다. \n람다 표현식에서 변하는(mutable) 변수에 접근해 값을 덮어 쓸 수 있는 것은 좋기도 하고 나쁘기도 한것이 아니라 더 나쁜 것이라고 봅니다.</code></pre></div>\n<p><strong><em>때문에 java는 이전 익명 클래스의 견해를 그대로 계승하여 lambda에서도 외부변수의 참조는 가능하지만 변경은 불가능 하도록 구현된 것입니다</em></strong></p>\n<hr>\n<h2>관련 참고</h2>\n<p><a href=\"https://meetup.toast.com/posts/186\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">[Kotlin] 메모리릭 방지하기 | Kotlin, Lambda의 강력함</a><br>\n<a href=\"https://d2.naver.com/helloworld/4911107\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">람다가 이끌어 갈 모던 Java</a><br>\n<a href=\"https://12bme.tistory.com/361\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">[자바] 람다(lambda)가 이끌어 갈 모던 JAVA(2)</a>  </p>","excerpt":"java와 kotlin의 closure에 관하여이전에 왜 Kotlin을 써야 할까?에서 제가 언급했던 closure에 관한 포스팅을 하려고 합니다  Closure먼저 closure부터 살펴 보겠습니다Closure…","frontmatter":{"title":"[Kotlin] java와 kotlin의 closure에 관하여","date":"2019-09-22","tags":["Notion","Kotlin","Java"],"keywords":["Kotlin","Java","lambda","closure"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/closure_java_and_kotlin/","previous":{"fields":{"slug":"/likedList_vs_arrayList/"},"frontmatter":{"title":"[DataStructure] ArrayList 내부 구조","tags":["DataStructure"],"published":true}},"next":null}}}